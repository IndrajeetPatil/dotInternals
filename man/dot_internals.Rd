% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dot_internals.R
\name{dot_internals}
\alias{dot_internals}
\title{Prepend internal functions with a dot}
\usage{
dot_internals()
}
\value{
Changed \code{.R} and \code{.Rmd} files with all instances of internal functions
replaced with their new "dotted" versions.
}
\description{
The goal of \code{{dotInternals}} is to set apart names of internal functions from the ones exported by adding a dot (\code{.}) in front of their name. The package automates this task in a scalable manner, and can be a nifty tool for large legacy projects with tons of internal functions.

Having a separate naming pattern for exported versus non-exported functions brings clarity to both users and developers about the public API of the package.
}
\details{
Here is how functions will be renamed depending on whether they are exported or not:
\itemize{
\item For \strong{exported functions}, names will not be changed:
}

\if{html}{\out{<div class="sourceCode r">}}\preformatted{# before        ---> after
extract_value() ---> extract_value() 
.draw_graph()   ---> .draw_graph()
}\if{html}{\out{</div>}}
\itemize{
\item For \strong{non-exported functions}, names will be prepended with a \code{.}, but only if it isn't already named that way:
}

\if{html}{\out{<div class="sourceCode r">}}\preformatted{# before        ---> after
extract_value() ---> .extract_value() 
.draw_graph()   ---> .draw_graph()
}\if{html}{\out{</div>}}

There is an exception to this rule: \code{S3}/\code{S4} methods will not be renamed, even if it is not exported.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{# before        ---> after
str.my_class()  ---> str.my_class() 
}\if{html}{\out{</div>}}

A few important things to keep in mind:
\itemize{
\item You need to run this function in the \strong{package root directory}.
\item The package needs to be \strong{installed}, rather than just sourced.
\item If you have run \code{dot_internals()} once and wish to run it again, you need to build the package before doing so.
\item The function will not work if you have run   \code{devtools::load_all()}/\code{pkgload::load_all()}.
\item There is also RStudio addin that you can use.
}
}
\examples{
if (FALSE) {
  # Assuming you are in the package root directory
  dot_internals()
}

}
